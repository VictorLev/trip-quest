var e,o;var r="undefined"!==typeof globalThis?globalThis:"undefined"!==typeof self?self:global;var t={};function coordEach(o,t,c){var n,p,a,l,u,i,f,d,s=0,h,y="FeatureCollection"===o.type,g="Feature"===o.type,E=y?o.features.length:1;for(n=0;n<E;n++){d=y?o.features[n].geometry:g?o.geometry:o;h="GeometryCollection"===d.type;i=h?d.geometries.length:1;for(l=0;l<i;l++){u=h?d.geometries[l]:d;f=u.coordinates;s=!c||"Polygon"!==u.type&&"MultiPolygon"!==u.type?0:1;if("Point"===u.type)t(f);else if("LineString"===u.type||"MultiPoint"===u.type)for(p=0;p<f.length;p++)t(f[p]);else if("Polygon"===u.type||"MultiLineString"===u.type)for(p=0;p<f.length;p++)for(a=0;a<f[p].length-s;a++)t(f[p][a]);else{if("MultiPolygon"!==u.type)throw new Error("Unknown Geometry Type");for(p=0;p<f.length;p++)for(a=0;a<f[p].length;a++)for(r.l=e=0;e<f[p][a].length-s;e++)t(f[p][a][e])}}}}t.coordEach=coordEach;function coordReduce(e,o,r,t){coordEach(e,(function(e){r=o(r,e)}),t);return r}t.coordReduce=coordReduce;function propEach(e,t){var c;switch(e.type){case"FeatureCollection":r.features=o=e.features;for(c=0;c<e.features.length;c++)t(e.features[c].properties);break;case"Feature":t(e.properties);break}}t.propEach=propEach;function propReduce(e,o,r){propEach(e,(function(e){r=o(r,e)}));return r}t.propReduce=propReduce;const c=t.coordEach,n=t.coordReduce,p=t.propEach,a=t.propReduce;export default t;export{c as coordEach,n as coordReduce,p as propEach,a as propReduce};

